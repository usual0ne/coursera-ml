import numpy as np
from matplotlib import pyplot as plt
from sklearn.metrics import precision_score, recall_score, f1_score, roc_curve

# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
actual_0 = np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
          1.,  1.,  1., 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
predicted_0 = np.array([ 0.19015288,  0.23872404,  0.42707312,  0.15308362,  0.2951875 ,
            0.23475641,  0.17882447,  0.36320878,  0.33505476,  0.202608  ,
            0.82044786,  0.69750253,  0.60272784,  0.9032949 ,  0.86949819,
            0.97368264,  0.97289232,  0.75356512,  0.65189193,  0.95237033,
            0.91529693,  0.8458463 ])


# /////////////////////////////////////////////////////////////////////////////////////
actual_1 = np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
                    0.,  0.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,
                    1.,  1.,  1.,  1.])
predicted_1 = np.array([ 0.41310733,  0.43739138,  0.22346525,  0.46746017,  0.58251177,
            0.38989541,  0.43634826,  0.32329726,  0.01114812,  0.41623557,
            0.54875741,  0.48526472,  0.21747683,  0.05069586,  0.16438548,
            0.68721238,  0.72062154,  0.90268312,  0.46486043,  0.99656541,
            0.59919345,  0.53818659,  0.8037637 ,  0.272277  ,  0.87428626,
            0.79721372,  0.62506539,  0.63010277,  0.35276217,  0.56775664])
actual_2 = np.array([ 1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  0.,
            0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])
predicted_2 = np.array([ 0.07058193,  0.57877375,  0.42453249,  0.56562439,  0.13372737,
            0.18696826,  0.09037209,  0.12609756,  0.14047683,  0.06210359,
            0.36812596,  0.22277266,  0.79974381,  0.94843878,  0.4742684 ,
            0.80825366,  0.83569563,  0.45621915,  0.79364286,  0.82181152,
            0.44531285,  0.65245348,  0.69884206,  0.69455127])


# /////////////////////////////////////////////////////////////////////////////////////
# —Ä–∏—Å–∫—É—é—â–∏–π –∏–¥–µ–∞–ª—å–Ω—ã–π –∞–ª–≥–æ–∏—Ç–º
actual_0r = np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,
            1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
predicted_0r = np.array([ 0.23563765,  0.16685597,  0.13718058,  0.35905335,  0.18498365,
            0.20730027,  0.14833803,  0.18841647,  0.01205882,  0.0101424 ,
            0.10170538,  0.94552901,  0.72007506,  0.75186747,  0.85893269,
            0.90517219,  0.97667347,  0.86346504,  0.72267683,  0.9130444 ,
            0.8319242 ,  0.9578879 ,  0.89448939,  0.76379055])
# —Ä–∏—Å–∫—É—é—â–∏–π —Ö–æ—Ä–æ—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
actual_1r = np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,
            1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
predicted_1r = np.array([ 0.13832748,  0.0814398 ,  0.16136633,  0.11766141,  0.31784942,
            0.14886991,  0.22664977,  0.07735617,  0.07071879,  0.92146468,
            0.87579938,  0.97561838,  0.75638872,  0.89900957,  0.93760969,
            0.92708013,  0.82003675,  0.85833438,  0.67371118,  0.82115125,
            0.87560984,  0.77832734,  0.7593189,  0.81615662,  0.11906964,
            0.18857729])

# /////////////////////////////////////////////////////////////////////////////////////
actual_10 = np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
                0.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,
                1.,  1.,  1.])
predicted_10 = np.array([ 0.29340574, 0.47340035,  0.1580356 ,  0.29996772,  0.24115457,  0.16177793,
                         0.35552878,  0.18867804,  0.38141962,  0.20367392,  0.26418924, 0.16289102,
                         0.27774892,  0.32013135,  0.13453541, 0.39478755,  0.96625033,  0.47683139,
                         0.51221325,  0.48938235, 0.57092593,  0.21856972,  0.62773859,  0.90454639,  0.19406537,
                         0.32063043,  0.4545493 ,  0.57574841,  0.55847795 ])
actual_11 = np.array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
                0.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
predicted_11 = np.array([ 0.35929566, 0.61562123,  0.71974688,  0.24893298,  0.19056711,  0.89308488,
            0.71155538,  0.00903258,  0.51950535,  0.72153302,  0.45936068,  0.20197229,  0.67092724,
                         0.81111343,  0.65359427,  0.70044585,  0.61983513,  0.84716577,  0.8512387 ,
                         0.86023125,  0.7659328 ,  0.70362246,  0.70127618,  0.8578749 ,  0.83641841,
                         0.62959491,  0.90445368])


# /////////////////////////////////////////////////////////////////////////////////////
# Programming assignment: problem 1. –§–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥ T = 0.65; –ø–æ –≥—Ä–∞—Ñ–∏–∫–∞–º –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —É–∑–Ω–∞—Ç—å,
# —á–µ–º—É —Ä–∞–≤–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —Ç—Ä–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ (actual, predicted).
# –í—ã—á–∏—Å–ª–∏—Ç–µ —Ç–æ—á–Ω—ã–µ precision –∏ recall –¥–ª—è —ç—Ç–∏—Ö —Ç—Ä–µ—Ö –ø–∞—Ä –≤–µ–∫—Ç–æ—Ä–æ–≤.
# 6 –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –∑–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:
# precision_1 recall_1 precision_10 recall_10 precision_11 recall_11
# –¶–∏—Ñ—Ä—ã XXX –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–∫–∏–º –∂–µ —Ü–∏—Ñ—Ä–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö actual_XXX –∏ predicted_XXX.
T = 0.65
for actual, predicted, descr in zip([actual_1],
                                    [predicted_1 > T],
                                    ["_1:"]):
    print(descr, "precision =", precision_score(actual, predicted), "recall =", \
        recall_score(actual, predicted))
print()
for actual, predicted, descr in zip([actual_10, actual_11],
                                    [predicted_10 > T, predicted_11 > T],
                                    ["_10:", "_11:"]):
    print(descr, "precision =", precision_score(actual, predicted), "recall =", \
        recall_score(actual, predicted))


# /////////////////////////////////////////////////////////////////////////////////////
# Programming assignment: problem 2. –ù–∞ precision –∏ recall –≤–ª–∏—è—é—Ç –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π, –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥.
# –î–ª—è —Ç–µ—Ö –∂–µ –ø–∞—Ä (actual, predicted), —á—Ç–æ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∑–∞–¥–∞—á–µ, –Ω–∞–π–¥–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏, –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É—é—â–∏–µ F1_score.
# –ë—É–¥–µ–º —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Ä–æ–≥–∏ –≤–∏–¥–∞ T = 0.1 * k, k - —Ü–µ–ª–æ–µ; —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è k.
# –ï—Å–ª–∏ f1 –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö k, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∏–∑ –Ω–∏—Ö.
# –ó–∞–ø–∏—à–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ k –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
# k_1, k_10, k_11
# –¶–∏—Ñ—Ä—ã XXX –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–∫–∏–º –∂–µ —Ü–∏—Ñ—Ä–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö actual_XXX –∏ predicted_XXX.
def find_k(actual, probabilities):
    opt_k = None
    opt_f = None
    for k in range(10):
        T = k * 0.1
        predicted = (probabilities > T)
        f = f1_score(actual, predicted)
        if (opt_f is None) or (f > opt_f):
            opt_f = f
            opt_k = k
    return opt_k

k_1 = find_k(actual_1, predicted_1)
k_10 = find_k(actual_10, predicted_10)
k_11 = find_k(actual_11, predicted_11)
ks = [k_1, k_10, k_11]


# /////////////////////////////////////////////////////////////////////////////////////
# Programming assignment: problem 3. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±–µ—Ä–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –≤–µ–∫—Ç–æ—Ä—ã actual –∏ predicted
# –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Log-Loss, –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≤—ã—à–µ.
# –í—ã—á–∏—Å–ª–∏—Ç–µ –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ–±–æ–∑–Ω–∞—á–∏–º –µ–≥–æ wll - ùë§ùëíùëñùëî‚Ñéùë°ùëíùëë_ùëôùëúùëî_ùëôùëúùë†ùë†) –Ω–∞ —Ç–µ—Ö –∂–µ –≤–µ–∫—Ç–æ—Ä–∞—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –≤—ã—á–∏—Å–ª—è–ª–∏ –æ–±—ã—á–Ω—ã–π log_loss,
# –∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–∞–π–ª –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
# wll_0 wll_1 wll_2 wll_0r wll_1r wll_10 wll_11
# –¶–∏—Ñ—Ä—ã XXX –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–∫–∏–º –∂–µ —Ü–∏—Ñ—Ä–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö actual_XXX –∏ predicted_XXX.
def wll(actual, predicted):
    n = len(actual)
    return -1 * np.mean((0.3 * actual * np.log(predicted) + 0.7 * (1 - actual) * np.log(1 - predicted)))

wll_0 = wll(actual_0, predicted_0)
wll_1 = wll(actual_1, predicted_1)
wll_2 = wll(actual_2, predicted_2)
wll_0r = wll(actual_0r, predicted_0r)
wll_1r = wll(actual_1r, predicted_1r)
wll_10 = wll(actual_10, predicted_10)
wll_11 = wll(actual_11, predicted_11)


# /////////////////////////////////////////////////////////////////////////////////////
# Programming assignment: problem 4. –ù–∞ –∫–∞–∂–¥–æ–π –∫—Ä–∏–≤–æ–π –Ω–∞–π–¥–∏—Ç–µ —Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –ª–µ–≤–æ–º—É –≤–µ—Ä—Ö–Ω–µ–º—É —É–≥–ª—É
# (–±–ª–∏–∂–µ –≤ —Å–º—ã—Å–ª–µ –æ–±—ã—á–Ω–æ–≥–æ –µ–≤–∫–ª–∏–¥–æ–≤–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è), —ç—Ç–æ–π —Ç–æ—á–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ä–æ–≥ –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏–∏.
# –ó–∞–ø–∏—à–∏—Ç–µ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –ø–æ—Ä–æ–≥–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
# T_0 T_1 T_2 T_0r T_1r T_10 T_11
# –¶–∏—Ñ—Ä—ã XXX –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–∫–∏–º –∂–µ —Ü–∏—Ñ—Ä–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö actual_XXX –∏ predicted_XXX.
# –ï—Å–ª–∏ –ø–æ—Ä–æ–≥–æ–≤, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—â–∏—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ—Å–∫–æ–ª—å–∫–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª—å—à–∏–π.
# –ü–æ—è—Å–Ω–µ–Ω–∏–µ: —Ñ—É–Ω–∫—Ü–∏—è roc_curve –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏—è: FPR (–º–∞—Å—Å–∏–≤ –∞–±—Å—Ü–∏–∏ —Ç–æ—á–µ–∫ ROC-–∫—Ä–∏–≤–æ–π),
# TPR (–º–∞—Å—Å–∏–≤ –æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫ ROC-–∫—Ä–∏–≤–æ–π) –∏ thresholds (–º–∞—Å—Å–∏–≤ –ø–æ—Ä–æ–≥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ—á–∫–∞–º).
# –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é —Ç–æ—á–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ plt.scatter.
def get_distance(fpr, tpr):
    return ((fpr) ** 2 + (tpr - 1) ** 2) ** 0.5

def get_opt_thresh(actual, predicted, name):
    fprs, tprs, thrs = roc_curve(actual, predicted)
    pr_opt = None
    tpr_opt = None
    distance_opt = None
    thr_opt = None
    for i in range(len(thrs)):
        dist = get_distance(fprs[i], tprs[i])
        if (distance_opt is None) or (dist < distance_opt):
            distance_opt = dist
            fpr_opt = fprs[i]
            tpr_opt = tprs[i]
            thr_opt = thrs[i]
    plt.figure(figsize=(5, 5))
    plt.plot(fprs, tprs)
    plt.xlabel('fpr')
    plt.ylabel('tpr')
    plt.title(name)
    plt.xlim((0, 1))
    plt.ylim((0, 1))
    plt.scatter([fpr_opt], [tpr_opt], color = 'red')
    plt.show()
    return thr_opt

T_0 = get_opt_thresh(actual_0, predicted_0, 'Perfect')
T_1 = get_opt_thresh(actual_1, predicted_1, 'Typical')
T_2 = get_opt_thresh(actual_2, predicted_2, 'Awful')
T_0r = get_opt_thresh(actual_0r, predicted_0r, 'Ideal Risky')
T_1r = get_opt_thresh(actual_1r, predicted_1r, 'Typical Risky')
T_10 = get_opt_thresh(actual_10, predicted_10, 'Avoids FP')
T_11 = get_opt_thresh(actual_11, predicted_11, 'Avoids FN')